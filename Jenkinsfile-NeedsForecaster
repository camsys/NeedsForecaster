pipeline {
    agent any

    tools {
       maven 'mvn'
       jdk 'openjdk-17'
    }

    stages {
        stage('Build Modules') {
          steps {
              dir('Core') {
                git branch: "${GIT_BRANCH.split("/")[1]}", changelog: false, credentialsId: 'jenkins-camsys-personal-token', poll: false, url: 'git@github.com:camsys/CSAssetCloud.git'
                sh 'mvn clean install'
              }
              sh "CI= mvn clean package -U"
	        }
	      }

        stage('Build Docker Images') {
          steps {
            sh "mvn docker:build"
          }
        }

        stage('Push Docker Images To Repos') {
          steps {
            withCredentials([[
                 $class: 'AmazonWebServicesCredentialsBinding',
                 accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                 secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                 credentialsId: '${CREDENTIALS_ID}'
             ]]) {
               sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com"
               sh "mvn docker:push -Ddocker.registry_id=${ACCOUNT_ID} -U"
             }
          }
	      }

        stage('Update Dev Environment') {
          environment {
            IMG_VERSION = sh(script:"mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep '^[^[]'", returnStdout: true).trim()
          }
          steps {
            withCredentials([[
                 $class: 'AmazonWebServicesCredentialsBinding',
                 accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                 secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                 credentialsId: '${CREDENTIALS_ID}'
             ]]) {
                script {
                 // See for why xargs: https://superuser.com/questions/1306071/aws-cli-using-cli-input-json-in-a-pipeline
                 NEEDSFORECASTER_REVISION = sh(script:"cat ${env.WORKSPACE}/task-template-dev.json | envsubst \
                 | xargs -0 aws ecs register-task-definition --cli-input-json \
                 | jq .taskDefinition.revision", returnStdout: true).trim()

                 sh "aws ecs update-service --cluster NeedsForecaster --service needs-forecaster-dev --task-definition needs-forecaster-dev:${NEEDSFORECASTER_REVISION}"
                }
             }
          }
        }

        stage('Update QA Environment') {
          when {
            anyOf {branch 'QA'; branch 'main'}
          }
          environment {
            IMG_VERSION = sh(script:"mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep '^[^[]'", returnStdout: true).trim()
          }
          steps {
            withCredentials([[
               $class: 'AmazonWebServicesCredentialsBinding',
               accessKeyVariable: 'AWS_ACCESS_KEY_ID',
               secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
               credentialsId: '${CREDENTIALS_ID}'
            ]]) {
              input "Deployed to dev. Do you want to deploy to QA?"
              milestone(1)

              script {
               // See for why xargs: https://superuser.com/questions/1306071/aws-cli-using-cli-input-json-in-a-pipeline
               NEEDSFORECASTER_REVISION = sh(script:"cat ${env.WORKSPACE}/task-template-qa.json | envsubst \
               | xargs -0 aws ecs register-task-definition --cli-input-json \
               | jq .taskDefinition.revision", returnStdout: true).trim()

               sh "aws ecs update-service --cluster NeedsForecaster --service needs-forecaster-qa --task-definition needs-forecaster-qa:${NEEDSFORECASTER_REVISION}"
              }
            }
          }
        }

        stage('Update Production Environment') {
          when {
            branch 'main';
          }
          environment {
            IMG_VERSION = sh(script:"mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep '^[^[]'", returnStdout: true).trim()
          }
          steps {
            withCredentials([[
               $class: 'AmazonWebServicesCredentialsBinding',
               accessKeyVariable: 'AWS_ACCESS_KEY_ID',
               secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
               credentialsId: '${CREDENTIALS_ID}'
            ]]) {

              input "Deployed to QA. Do you want to create the production task? You have to update the service manually."
              milestone(2)

              script {
               // See for why xargs: https://superuser.com/questions/1306071/aws-cli-using-cli-input-json-in-a-pipeline
               sh(script:"cat ${env.WORKSPACE}/task-template-prod.json | envsubst \
               | xargs -0 aws ecs register-task-definition --cli-input-json")
              }
            }
          }
        }

    }
}
